{"ast":null,"code":"var _jsxFileName = \"/Users/rosepowell/Desktop/Book_Writing/book_writing/src/Book.js\",\n  _s = $RefreshSig$();\nimport cover from './sprites/OpenBook1.png';\nimport page from './sprites/OpenBookPages.png';\nimport { useState, useEffect } from 'react';\nimport InputPage from './InputPage';\nimport Page from './Page';\nimport axios from 'axios';\nimport './css/Book.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Book = _ref => {\n  _s();\n  let {\n    areReading,\n    bookId\n  } = _ref;\n  const [pages, setPages] = useState([]);\n  const [pageNum, setPageNum] = useState([1, 2]); //maybe later keep track of what page they were on last and add it to the book in the db\n\n  useEffect(() => {\n    const getPages = async () => {\n      const res = await axios.get(`/books/${bookId}/pages`);\n      if (res.data.pages.length > 0) {\n        setPages(n => n = res.data.pages);\n      } else if (res.data.pages.length <= 0 && !areReading) {\n        addPage();\n      }\n    };\n    getPages();\n  }, []);\n  const updatePage = async text => {\n    let res = await axios.patch(`/books/${bookId}/pages/${bookId}`, {\n      text: text\n    });\n    console.log(res.data.id);\n    if (res.data.id) {\n      return res.data;\n      // setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n    }\n  };\n\n  const changePage = async (page, num) => {\n    let pageInfo = [];\n    let newPageNum = pageNum;\n    if (page.text != pages[pageNum[0] - 1].text) {\n      let res = await updatePage(page.text);\n      pageInfo.push(res);\n    }\n    if (page.text2) {\n      if (page.text2 != pages[pageNum[1] - 1].text) {\n        let res = await updatePage(page.text2);\n        pageInfo.push(res);\n      }\n    }\n    let newPages = [];\n    if (pages.length > 0) {\n      newPages = pages.map(page => {\n        console.log(page);\n        if (page.id === pageInfo[0].id) return pageInfo[0];\n        if (pageInfo[1]) {\n          if (page.id === pageInfo[1].id) return pageInfo[1];\n        }\n        return page;\n      });\n    } else {\n      newPages = pageInfo;\n    }\n    if (pageNum[1] + num > pages.length) {\n      if (!areReading) {\n        await addPage();\n        newPageNum = [pageNum[0] + num, pageNum[1] + num];\n      }\n    } else if (pageNum[0] + num > 0) {\n      newPageNum = [pageNum[0] + num, pageNum[1] + num];\n    }\n    setPages(n => n = newPages);\n    setPageNum(n => n = newPageNum);\n  };\n  const addPage = async data => {\n    let res = await axios.post(`/books/${bookId}/pages`, {\n      num_of_pages: 2,\n      page_num: pageNum[0]\n    });\n    if (res.data.pages) {\n      setPages(n => n = [...pages, ...res.data.pages]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Book\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_cover\",\n      src: cover,\n      alt: \"cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_pages\",\n      src: page,\n      alt: \"pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 1\n    }, this), pages.length > 0 ? areReading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Page, {\n        pageNum: pageNum[0],\n        changePage: changePage,\n        text: pages[pageNum[0] - 1].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Page, {\n        pageNum: pageNum[1],\n        changePage: changePage,\n        text: pages[pageNum[1] - 1].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 90\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(InputPage, {\n        pageNum: pageNum[0],\n        changePage: changePage,\n        text: [pages[pageNum[0] - 1].text, pages[pageNum[1] - 1].text],\n        isTwoPages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this)\n    }, void 0, false) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 8\n  }, this);\n};\n_s(Book, \"6vkIo2VJZLXzgIC11wIh6I2ccoU=\");\n_c = Book;\nexport default Book;\nvar _c;\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"names":["cover","page","useState","useEffect","InputPage","Page","axios","Book","areReading","bookId","pages","setPages","pageNum","setPageNum","getPages","res","get","data","length","n","addPage","updatePage","text","patch","console","log","id","changePage","num","pageInfo","newPageNum","push","text2","newPages","map","post","num_of_pages","page_num"],"sources":["/Users/rosepowell/Desktop/Book_Writing/book_writing/src/Book.js"],"sourcesContent":["import cover from './sprites/OpenBook1.png'\nimport page from './sprites/OpenBookPages.png'\nimport {useState,useEffect} from 'react';\nimport InputPage from './InputPage'\nimport Page from './Page'\nimport axios from 'axios';\nimport './css/Book.css';\nconst Book =({areReading,bookId})=>{\n\nconst [pages,setPages]=useState([]);\nconst [pageNum,setPageNum]=useState([1,2]);//maybe later keep track of what page they were on last and add it to the book in the db\n\n\nuseEffect(()=>{\nconst getPages = async()=>{\n  const res = await axios.get(`/books/${bookId}/pages`);\n  if(res.data.pages.length>0){\n    setPages((n)=> n= res.data.pages);\n  }\n  else if(res.data.pages.length<=0 && !areReading){\n    addPage();\n  }\n\n}\ngetPages();\n},[])\n\nconst updatePage=async(text)=>{\n  let res = await axios.patch(`/books/${bookId}/pages/${bookId}`,{text:text});\n  console.log(res.data.id);\n  if(res.data.id){\n    return res.data;\n   // setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n\n  }\n}\n\n\nconst changePage = async(page,num)=>{\nlet pageInfo =[];\nlet newPageNum = pageNum;\n\n  if(page.text != pages[pageNum[0]-1].text){\n    let res = await updatePage(page.text);\n    pageInfo.push(res);\n  }\n\n  if(page.text2){\n    if(page.text2 != pages[pageNum[1]-1].text){\n      let res = await updatePage(page.text2);\n      pageInfo.push(res);\n    }\n  }\n\n  let newPages =[]\nif(pages.length >0){\n   newPages= pages.map(page=>{\n     console.log(page);\n     if(page.id === pageInfo[0].id) return pageInfo[0];\n     if(pageInfo[1]){\n       if(page.id === pageInfo[1].id) return pageInfo[1];\n     }\n     return page;\n  });\n}else{\n  newPages=pageInfo;\n}\n\n  if(pageNum[1]+num > pages.length){\n    if(!areReading){\n      await addPage();\n      newPageNum = [pageNum[0]+num,pageNum[1]+num];\n\n    }\n  }\n  else if(pageNum[0]+num > 0){\n    newPageNum = [pageNum[0]+num,pageNum[1]+num];\n  }\n  setPages((n)=> n=newPages);\n  setPageNum((n)=> n= newPageNum);\n}\n\n\nconst addPage =async(data)=>{\n let res = await axios.post(`/books/${bookId}/pages`,{num_of_pages:2,page_num:pageNum[0]});\nif(res.data.pages){\n  setPages((n)=> n= [...pages,...res.data.pages]);\n}\n}\n\nreturn <div className ='Book'>\n\n<img className ='Book_cover' src={cover} alt=\"cover\"/>\n<img className ='Book_pages' src={page} alt=\"pages\"/>\n\n\n{\n  pages.length>0?\n    areReading?\n    <>\n    <Page pageNum={pageNum[0]} changePage={changePage} text={pages[pageNum[0]-1].text}/> <Page pageNum={pageNum[1]} changePage={changePage} text={pages[pageNum[1]-1].text}/>\n    </>\n    : <>\n    <InputPage pageNum={pageNum[0]} changePage={changePage} text={[pages[pageNum[0]-1].text,pages[pageNum[1]-1].text]} isTwoPages={true}/>\n    </>\n  : null\n}\n\n\n</div>\n}\n\nexport default Book;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}