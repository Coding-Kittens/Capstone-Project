{"ast":null,"code":"var _jsxFileName = \"/Users/rosepowell/Desktop/Book_Writing/book_writing/src/forms/PopUpForm.js\",\n  _s = $RefreshSig$();\nimport useFields from \"../hooks/useFields\";\nimport { v4 as uuidv4 } from 'uuid';\n//takes inputs and makes a small popup form for it\n//\n//takes:\n//functions to submit and close the form\n//the text on the submit btn\n//the initData\n//the inputs witch is a list of objs [{title,name,type}]\n////\n//title is the label text\n//name is the input name\n//type is the type of input and is optianal it defalts to text\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PopUpForm = _ref => {\n  _s();\n  let {\n    submit,\n    inputs,\n    initData,\n    submitText,\n    closeForm\n  } = _ref;\n  const [formData, handleChange, resetFormData] = useFields(initData);\n  const handleSubmit = event => {\n    event.preventDefault();\n    submit(formData);\n    resetFormData();\n    closeForm();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"PopUp\",\n      onSubmit: handleSubmit,\n      children: [inputs ? inputs.map(input => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [input.title, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: input.type ? input.type : \"text\",\n          name: input.name,\n          value: formData[input.name],\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }, this)]\n      }, uuidv4(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this)) : null, closeForm ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: closeForm,\n        name: \"button\",\n        children: \"Cancle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        name: \"button\",\n        children: submitText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(PopUpForm, \"dz4ROXeyVRBJUFLZx7r19KIR99s=\", false, function () {\n  return [useFields];\n});\n_c = PopUpForm;\nexport default PopUpForm;\nvar _c;\n$RefreshReg$(_c, \"PopUpForm\");","map":{"version":3,"names":["useFields","v4","uuidv4","PopUpForm","submit","inputs","initData","submitText","closeForm","formData","handleChange","resetFormData","handleSubmit","event","preventDefault","map","input","title","type","name"],"sources":["/Users/rosepowell/Desktop/Book_Writing/book_writing/src/forms/PopUpForm.js"],"sourcesContent":["import useFields from \"../hooks/useFields\";\nimport { v4 as uuidv4 } from 'uuid';\n//takes inputs and makes a small popup form for it\n//\n//takes:\n//functions to submit and close the form\n//the text on the submit btn\n//the initData\n//the inputs witch is a list of objs [{title,name,type}]\n////\n//title is the label text\n//name is the input name\n//type is the type of input and is optianal it defalts to text\nconst PopUpForm = ({ submit, inputs, initData, submitText, closeForm }) => {\n  const [formData, handleChange, resetFormData] = useFields(initData);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    submit(formData);\n    resetFormData();\n    closeForm();\n  };\n\n  return (\n    <>\n      <form className=\"PopUp\" onSubmit={handleSubmit}>\n        {inputs\n          ? inputs.map((input) => (\n              <label key={uuidv4()}>\n                {input.title}\n                <input\n                  type={input.type ? input.type : \"text\"}\n                  name={input.name}\n                  value={formData[input.name]}\n                  onChange={handleChange}\n                />\n              </label>\n            ))\n          : null}\n        {closeForm ? (\n          <button type=\"button\" onClick={closeForm} name=\"button\">\n            Cancle\n          </button>\n        ) : null}\n        <button type=\"submit\" name=\"button\">\n          {submitText}\n        </button>\n      </form>\n    </>\n  );\n};\nexport default PopUpForm;\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,oBAAoB;AAC1C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,MAAMC,SAAS,GAAG,QAAyD;EAAA;EAAA,IAAxD;IAAEC,MAAM;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,UAAU;IAAEC;EAAU,CAAC;EACpE,MAAM,CAACC,QAAQ,EAAEC,YAAY,EAAEC,aAAa,CAAC,GAAGX,SAAS,CAACM,QAAQ,CAAC;EAEnE,MAAMM,YAAY,GAAIC,KAAK,IAAK;IAC9BA,KAAK,CAACC,cAAc,EAAE;IACtBV,MAAM,CAACK,QAAQ,CAAC;IAChBE,aAAa,EAAE;IACfH,SAAS,EAAE;EACb,CAAC;EAED,oBACE;IAAA,uBACE;MAAM,SAAS,EAAC,OAAO;MAAC,QAAQ,EAAEI,YAAa;MAAA,WAC5CP,MAAM,GACHA,MAAM,CAACU,GAAG,CAAEC,KAAK,iBACf;QAAA,WACGA,KAAK,CAACC,KAAK,eACZ;UACE,IAAI,EAAED,KAAK,CAACE,IAAI,GAAGF,KAAK,CAACE,IAAI,GAAG,MAAO;UACvC,IAAI,EAAEF,KAAK,CAACG,IAAK;UACjB,KAAK,EAAEV,QAAQ,CAACO,KAAK,CAACG,IAAI,CAAE;UAC5B,QAAQ,EAAET;QAAa;UAAA;UAAA;UAAA;QAAA,QACvB;MAAA,GAPQR,MAAM,EAAE;QAAA;QAAA;QAAA;MAAA,QASrB,CAAC,GACF,IAAI,EACPM,SAAS,gBACR;QAAQ,IAAI,EAAC,QAAQ;QAAC,OAAO,EAAEA,SAAU;QAAC,IAAI,EAAC,QAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAE9C,GACP,IAAI,eACR;QAAQ,IAAI,EAAC,QAAQ;QAAC,IAAI,EAAC,QAAQ;QAAA,UAChCD;MAAU;QAAA;QAAA;QAAA;MAAA,QACJ;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ,iBACN;AAEP,CAAC;AAAC,GArCIJ,SAAS;EAAA,QACmCH,SAAS;AAAA;AAAA,KADrDG,SAAS;AAsCf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}