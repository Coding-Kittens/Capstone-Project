{"ast":null,"code":"var _jsxFileName = \"/Users/rosepowell/Desktop/Book_Writing/book_writing/front/src/books/BookMark.js\",\n  _s = $RefreshSig$();\nimport PopUpForm from \"../forms/PopUpForm\";\nimport { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport bookmark from \"../sprites/bookMark.png\";\nimport useAxios from \"../hooks/useAxios\";\nimport \"../css/CharacterBook.css\";\nimport Tab from \"./Tab\";\nimport \"../css/BookMark.css\";\n\n///shows all the bookmarks for a book and lets you add a new one\n//takes:\n//the id of the book you are on\n//the current page id\n//a function to go to a page whe you click on a bookmark that is not on the current page\n//\n// I use the variable name of note because it is shorter\n///and bookmarks are kinda like notes but for one page instead of the book\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BookMark = _ref => {\n  _s();\n  let {\n    bookId,\n    currPageId,\n    changePage\n  } = _ref;\n  const [reqNotes, notes, setNotes] = useAxios([], true);\n  const [addForm, setAddForm] = useState(false);\n\n  //gets all the bookmarks for a book\n  useEffect(() => {\n    reqNotes(\"get\", `/bookmarks/${bookId}`, \"bookmarks\");\n  }, []);\n\n  //adds a bookmark\n  const addNote = (data, pageId) => {\n    reqNotes(\"post\", `/bookmarks/${bookId}/${pageId}`, \"bookmark\", data);\n  };\n\n  //deletes a bookmark\n  const deleteNote = async pageId => {\n    const res = await reqNotes(\"delete\", `/bookmarks/${bookId}/${pageId}`);\n    if (res.message === \"Deleted!\") {\n      let updatedNotes = notes.filter(note => {\n        if (note.page_id !== pageId) return note;\n      });\n      if (!updatedNotes[0]) updatedNotes = [];\n      setNotes(() => updatedNotes);\n    }\n  };\n\n  //edits a bookmark\n  const editNote = (data, pageId) => {\n    reqNotes(\"patch\", `/bookmarks/${bookId}/${pageId}`, \"bookmark\", {\n      ...data,\n      page_id: currPageId,\n      book_id: bookId\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"BookMark_Image\",\n      src: bookmark,\n      alt: \"bookmark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BookMark\",\n      children: [notes.length > 0 && currPageId ? notes.map(note => /*#__PURE__*/_jsxDEV(Tab, {\n        info: note,\n        page_id: currPageId,\n        handleClick: () => changePage(note.page_num),\n        editTab: editNote,\n        deleteTab: deleteNote\n      }, uuidv4(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }, this)) : null, addForm ? /*#__PURE__*/_jsxDEV(BookMarkForm, {\n        closeForm: () => setAddForm(false),\n        submit: data => addNote(data, currPageId),\n        initData: {\n          text: \"\"\n        },\n        submitText: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"BookMark_button\",\n          onClick: () => setAddForm(true),\n          name: \"button\",\n          children: \"New Bookmark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(BookMark, \"FAI44w56+Xb+R6r8YUDT3xDKQVA=\", false, function () {\n  return [useAxios];\n});\n_c = BookMark;\nexport default BookMark;\nvar _c;\n$RefreshReg$(_c, \"BookMark\");","map":{"version":3,"names":["PopUpForm","useState","useEffect","v4","uuidv4","bookmark","useAxios","Tab","jsxDEV","_jsxDEV","Fragment","_Fragment","BookMark","_ref","_s","bookId","currPageId","changePage","reqNotes","notes","setNotes","addForm","setAddForm","addNote","data","pageId","deleteNote","res","message","updatedNotes","filter","note","page_id","editNote","book_id","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","length","map","info","handleClick","page_num","editTab","deleteTab","BookMarkForm","closeForm","submit","initData","text","submitText","type","onClick","name","_c","$RefreshReg$"],"sources":["/Users/rosepowell/Desktop/Book_Writing/book_writing/front/src/books/BookMark.js"],"sourcesContent":["import PopUpForm from \"../forms/PopUpForm\";\nimport { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport bookmark from \"../sprites/bookMark.png\";\nimport useAxios from \"../hooks/useAxios\";\nimport \"../css/CharacterBook.css\";\n\nimport Tab from \"./Tab\";\nimport \"../css/BookMark.css\";\n\n///shows all the bookmarks for a book and lets you add a new one\n//takes:\n//the id of the book you are on\n//the current page id\n//a function to go to a page whe you click on a bookmark that is not on the current page\n//\n// I use the variable name of note because it is shorter\n///and bookmarks are kinda like notes but for one page instead of the book\nconst BookMark = ({ bookId, currPageId, changePage }) => {\n  const [reqNotes, notes, setNotes] = useAxios([], true);\n  const [addForm, setAddForm] = useState(false);\n\n  //gets all the bookmarks for a book\n  useEffect(() => {\n    reqNotes(\"get\", `/bookmarks/${bookId}`, \"bookmarks\");\n  }, []);\n\n  //adds a bookmark\n  const addNote = (data, pageId) => {\n    reqNotes(\"post\", `/bookmarks/${bookId}/${pageId}`, \"bookmark\", data);\n  };\n\n  //deletes a bookmark\n  const deleteNote = async (pageId) => {\n    const res = await reqNotes(\"delete\", `/bookmarks/${bookId}/${pageId}`);\n    if (res.message === \"Deleted!\") {\n      let updatedNotes = notes.filter((note) => {\n        if (note.page_id !== pageId) return note;\n      });\n      if (!updatedNotes[0]) updatedNotes = [];\n      setNotes(() => updatedNotes);\n    }\n  };\n\n  //edits a bookmark\n  const editNote = (data, pageId) => {\n    reqNotes(\"patch\", `/bookmarks/${bookId}/${pageId}`, \"bookmark\", {\n      ...data,\n      page_id: currPageId,\n      book_id: bookId,\n    });\n  };\n\n  return (\n    <>\n      <img className=\"BookMark_Image\" src={bookmark} alt=\"bookmark\" />\n\n      <div className=\"BookMark\">\n        {notes.length > 0 && currPageId\n          ? notes.map((note) => (\n              <Tab\n                key={uuidv4()}\n                info={note}\n                page_id={currPageId}\n                handleClick={() => changePage(note.page_num)}\n                editTab={editNote}\n                deleteTab={deleteNote}\n              />\n            ))\n          : null}\n\n        {addForm ? (\n          <BookMarkForm\n          closeForm={() => setAddForm(false)}\n          submit={(data) => addNote(data, currPageId)}\n          initData={{\n            text: \"\",\n          }}\n          submitText=\"Add\"\n          />\n        ) : (\n          <>\n            <button\n              type=\"button\"\n              className=\"BookMark_button\"\n              onClick={() => setAddForm(true)}\n              name=\"button\"\n            >\n              New Bookmark\n            </button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\nexport default BookMark;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}