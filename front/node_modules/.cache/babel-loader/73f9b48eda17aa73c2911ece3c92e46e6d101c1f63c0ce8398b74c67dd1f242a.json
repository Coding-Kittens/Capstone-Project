{"ast":null,"code":"var _jsxFileName = \"/Users/rosepowell/Desktop/Book_Writing/book_writing/src/books/Book.js\",\n  _s = $RefreshSig$();\nimport cover from '../sprites/OpenBook1.png';\nimport page from '../sprites/OpenBookPages.png';\nimport { useNavigate } from \"react-router-dom\";\nimport { useState, useEffect, useContext } from 'react';\nimport InputPage from './InputPage';\nimport BookMark from '../books/BookMark';\nimport { UserContext } from \"../context/context\";\nimport Page from './Page';\nimport axios from 'axios';\nimport useAxios from '../hooks/useAxios';\nimport '../css/Book.css';\n\n//keeps track of what page the user is on\n//\n// if they are reading the book gets all the pages for it\n//\n//  if not gets the page by page num when going to the next page\n//   add pages when there are no more Pages\n//   updates the pages when changeing pages and when user presses save\n///////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Book = _ref => {\n  _s();\n  let {\n    areReading,\n    bookId,\n    num_of_pages = 2\n  } = _ref;\n  const currentUser = useContext(UserContext);\n  const navigate = useNavigate();\n  const [reqPages, pages, setPages] = useAxios([], areReading);\n  const [reqBook, book] = useAxios(null);\n  const [currPage, setCurrPage] = useState([1, 2]);\n\n  //when the component first renders\n  // gets all the pages in the book, if the user is reading the book\n  useEffect(() => {\n    const getPages = async () => {\n      if (areReading) {\n        const res = await reqPages('get', `/books/${bookId}/pages/all`, 'pages');\n        console.log('get reading res', res);\n      }\n    };\n    getPages();\n  }, []);\n\n  // let page =[];\n\n  // console.log('pages',pages);\n\n  ///when the current page updates gets the current pages, if the user is writing\n  useEffect(() => {\n    // debugger;\n    // console.log('currPage effect',currPage);\n    const getPages = async () => {\n      const res = await reqBook('get', `/books/${bookId}`, 'book');\n      if (!areReading && res.data.username === currentUser.username) {\n        const res = await reqPages('get', `/books/${bookId}/pages`, 'pages', {\n          page_nums: currPage\n        }, false);\n        console.log('get res', res);\n        if (res.message === 'Page not found!') {\n          addPages();\n        } else {\n          setPages(n => n = [...res]);\n        }\n      } else if (!areReading && res.data.username !== currentUser.username) {\n        navigate(`/book/${bookId}`);\n        //set message to: Unautrized! Only the writer of the book can edit the book.\n      }\n    };\n\n    getPages();\n  }, [currPage]);\n\n  //go to the next or previous pages\n  //save the current pages\n  const changePage = (num, data) => {\n    if (!areReading) updatePage(data);\n    let newPage = currPage[0] !== null ? currPage[0] + num : num;\n    if (newPage <= 0) newPage = 1;\n    if (newPage >= pages.length && areReading) newPage = pages.length - 1;\n    setCurrPage(n => n = [newPage, newPage + 1]);\n  };\n\n  //gose to a page\n  const goToPage = num => {\n    setCurrPage(n => n = [num, num + 1]);\n  };\n\n  //add new Pages\n  const addPages = async () => {\n    const res = await reqPages('post', `/books/${bookId}/pages`, 'pages', {\n      num_of_pages: 2,\n      page_num: currPage[0]\n    });\n  };\n\n  //saves/updates the current pages\n  const updatePage = async data => {\n    if (currPage[0]) {\n      const pg1 = await reqPages('patch', `/books/${bookId}/pages/${currPage[0]}`, 'page', {\n        text: data.text\n      }, false);\n      const pg2 = await reqPages('patch', `/books/${bookId}/pages/${currPage[1]}`, 'page', {\n        text: data.text2\n      }, false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Book\",\n    children: [pages[0] && !areReading ? /*#__PURE__*/_jsxDEV(BookMark, {\n      bookId: bookId,\n      username: currentUser.username,\n      currPageId: pages[0].id,\n      changePage: goToPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 6\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_cover\",\n      src: cover,\n      alt: \"cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_pages\",\n      src: page,\n      alt: \"pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 3\n    }, this), pages.length > 0 ? areReading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        changePage: changePage,\n        page: [pages[currPage[0] - 1], pages[currPage[1] - 1]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(InputPage, {\n        changePage: changePage,\n        savePage: updatePage,\n        page: [...pages]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this)\n    }, void 0, false) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 10\n  }, this);\n\n  //\n  //\n  //\n  // const [reqPages,pages,setPages] = useAxios([],true);\n  // const [currPage,setCurrPage]=useState([null,null]);\n  // let tempPages =[...pages];\n  // // console.log('currnt page nums',currPage[0],currPage[1]);\n  // // console.log(pages);\n  //\n  // useEffect(()=>{\n  //   // debugger;\n  // const getPages=async()=>{\n  //   const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n  //   // console.log(res);\n  //   if(res.data.length <=0) addPages();\n  //   // setPages(tempPages);\n  // }\n  // getPages();\n  // },[])\n  //\n  // //\n  // // useEffect(()=>{\n  // //   console.log('crr pages');\n  // //   setPages(tempPages);\n  // // // if(currPage[0] >= pages.length ){\n  // // //   console.log('add');\n  // // // addPages();\n  // // // }\n  // // },[currPage])\n  // //\n  //\n  //\n  // useEffect(()=>{\n  //   console.log('crr pages');\n  //   if(currPage[0]===null){\n  //       setCurrPage([0,1]);\n  //   }\n  //   else if(pages.length>0){\n  //     let newPage = currPage[0]!==null? currPage[0]+num_of_pages : num_of_pages;\n  //     if (newPage<0) newPage = 0;\n  //     if(newPage>=pages.length && areReading) newPage =pages.length-2;\n  //     setCurrPage([newPage,newPage+1]);\n  //   }\n  //   console.log(currPage);\n  // },[pages])\n  //\n  //\n  //\n  //\n  //\n  // const changePage =(num,data)=>{\n  //    // debugger;\n  // updatePage(data);\n  // if(currPage[0]+num_of_pages>=pages.length && !areReading){\n  //   addPages();\n  //   // return;\n  // }\n  // // let newPage = currPage[0]!==null? currPage[0]+num : num;\n  // // if (newPage<0) newPage = 0;\n  // // if(newPage>=pages.length && areReading) newPage =pages.length-2;\n  // // if(newPage>=pages.length && !areReading){\n  // //   addPages();\n  // //   return;\n  // // }\n  // setPages(tempPages);\n  // // setCurrPage([newPage,newPage+1]);\n  // }\n  //\n  //\n  //\n  // const addPages =async()=>{\n  //   console.log('add-- currnt page nums',currPage[0],currPage[1]);\n  //   console.log('add---- newpage nums',currPage[0]+2,currPage[1]+2);\n  //   const res= await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:currPage[0]+2},false);\n  //   console.log(tempPages);\n  //   tempPages=[...tempPages,...res];\n  //   // currPage[0]!==null? setCurrPage([currPage[0]+2,currPage[1]+2]) : setCurrPage([0,1]);\n  // }\n  //\n  //\n  // const updatePage =async(data)=>{\n  //   const pageId = pages[currPage[0]].id;\n  //   const pageId2 = pages[currPage[1]].id;\n  //   if(pageId && pageId2){\n  //     console.log('patch');\n  //   const pg1 = await reqPages('patch',`/books/${bookId}/pages/${pageId}`,'page',{text:data.text},false);\n  //   const pg2 = await reqPages('patch',`/books/${bookId}/pages/${pageId2}`,'page',{text:data.text2},false);\n  //   tempPages = pages.map(page=> {\n  //     if(page.id===pageId){\n  //       return pg1;\n  //     }\n  //     else if (page.id===pageId2) {\n  //       return pg2;\n  //     }\n  //     else {\n  //       return page;\n  //     }\n  //   })\n  //\n  //   }\n  //\n  // }\n\n  //---------------------------------------------------------------------------------\n\n  //\n  // const [reqPages,pages,setPages]=useAxios([]);\n  // const [pageNum,setPageNum]=useState([1,2]);//maybe later keep track of what page they were on last and add it to the book in the db\n  //\n  //\n  // useEffect(()=>{\n  //   console.log('first');\n  //   const getPages = async()=>{\n  //     const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n  //      if(res.data.length<=0 && !areReading){\n  //       const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n  //     }\n  //\n  //   }\n  //   getPages();\n  // },[])\n  //\n  //\n  //\n  // const updatePage=async(text,pageId)=>{\n  //   let res = await axios.patch(`/books/${bookId}/pages/${pageId}`,{text:text});\n  //   console.log(res.data.id);\n  //   if(res.data.id){\n  //     // return res.data;\n  //    setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n  //   }\n  // }\n  //\n  //\n  // /// if text is different update them\n  //\n  // //change the page num\n  //\n  // //update the page num\n  //\n  // //this should cause a rerender and update the input to show the correct pages\n  //\n  //\n  //\n  // const changePage = async(page,num)=>{\n  //\n  //\n  // console.log('page',page);\n  // console.log('num',num);\n  //   //\n  //   // if(page.text != pages[pageNum[0]-1].text){\n  //   //   await updatePage(page.text,pages[pageNum[0]-1].id);\n  //   // }\n  //   //\n  //   // if(page.text2){\n  //   //   if(page.text2 != pages[pageNum[1]-1].text){\n  //   //     await updatePage(page.text2,pages[pageNum[1]-1].id);\n  //   //   }\n  //   // }\n  //\n  //   if(pageNum[1]+num > pages.length){\n  //     if(!areReading){\n  //       console.log('is not reading  is grater than length');\n  //       console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n  //         setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n  //     }\n  //   }\n  //   else if(pageNum[0]+num > 0){\n  //     console.log('is grater than zero');\n  //     console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n  //       setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n  //   }\n  // }\n  //\n  //\n  //\n  // const addPage =async()=>{\n  //   const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n  // }\n  //\n  //\n  //\n  //\n  //\n  // return <div className ='Book'>\n  //\n  // <img className ='Book_cover' src={cover} alt=\"cover\"/>\n  // <img className ='Book_pages' src={page} alt=\"pages\"/>\n  //\n  //\n  //\n  // {\n  //   pages.length>0?\n  //     areReading?\n  //     <>\n  //     <Page pageNum={pageNum[0]} changePage={changePage} text={pages[pageNum[0]-1].text}/> <Page pageNum={pageNum[1]} changePage={changePage} text={pages[pageNum[1]-1].text}/>\n  //     </>\n  //     : <>\n  //     <InputPage pageNum={pageNum[0]} changePage={changePage} text={[pages[pageNum[0]-1].text,pages[pageNum[1]-1].text]} isTwoPages={true}/>\n  //     </>\n  //   : null\n  // }\n  //\n  //\n  // </div>\n};\n_s(Book, \"/CUkUqNUCjW5rk5Q+AF+n+eVieo=\", false, function () {\n  return [useNavigate, useAxios, useAxios];\n});\n_c = Book;\nexport default Book;\nvar _c;\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"names":["cover","page","useNavigate","useState","useEffect","useContext","InputPage","BookMark","UserContext","Page","axios","useAxios","Book","areReading","bookId","num_of_pages","currentUser","navigate","reqPages","pages","setPages","reqBook","book","currPage","setCurrPage","getPages","res","console","log","data","username","page_nums","message","addPages","n","changePage","num","updatePage","newPage","length","goToPage","page_num","pg1","text","pg2","text2","id"],"sources":["/Users/rosepowell/Desktop/Book_Writing/book_writing/src/books/Book.js"],"sourcesContent":["import cover from '../sprites/OpenBook1.png';\nimport page from '../sprites/OpenBookPages.png';\nimport { useNavigate } from \"react-router-dom\";\nimport {useState, useEffect, useContext} from 'react';\nimport InputPage from './InputPage';\nimport  BookMark from '../books/BookMark';\nimport { UserContext } from \"../context/context\";\nimport Page from './Page';\nimport axios from 'axios';\nimport useAxios from '../hooks/useAxios';\nimport '../css/Book.css';\n\n//keeps track of what page the user is on\n//\n// if they are reading the book gets all the pages for it\n//\n//  if not gets the page by page num when going to the next page\n//   add pages when there are no more Pages\n//   updates the pages when changeing pages and when user presses save\n///////////\nconst Book =({areReading,bookId,num_of_pages=2})=>{\n\n  const currentUser = useContext(UserContext);\n  const navigate = useNavigate();\nconst [reqPages,pages,setPages] = useAxios([],areReading);\nconst [reqBook,book] = useAxios(null);\nconst [currPage,setCurrPage]=useState([1,2]);\n\n\n//when the component first renders\n// gets all the pages in the book, if the user is reading the book\nuseEffect(()=>{\nconst getPages=async()=>{\n  if(areReading){\n      const res = await reqPages('get',`/books/${bookId}/pages/all`,'pages');\n      console.log('get reading res',res);\n  }\n}\ngetPages();\n},[])\n\n// let page =[];\n\n// console.log('pages',pages);\n\n\n///when the current page updates gets the current pages, if the user is writing\nuseEffect(()=>{\n     // debugger;\n     // console.log('currPage effect',currPage);\nconst getPages=async()=>{\n\n  const res = await reqBook('get',`/books/${bookId}`,'book');\n\n  if(!areReading && res.data.username===currentUser.username){\n    const res = await reqPages('get',`/books/${bookId}/pages`,'pages',{page_nums:currPage},false);\n    console.log('get res',res);\n    if(res.message==='Page not found!'){\n      addPages();\n    }else {\n      setPages((n)=>n=[...res])\n    }\n\n  }\n  else if (!areReading && res.data.username !== currentUser.username) {\nnavigate(`/book/${bookId}`);\n//set message to: Unautrized! Only the writer of the book can edit the book.\n  }\n}\n\ngetPages();\n\n\n},[currPage])\n\n\n//go to the next or previous pages\n//save the current pages\nconst changePage =(num,data)=>{\nif(!areReading) updatePage(data);\nlet newPage = currPage[0]!==null? currPage[0]+num : num;\nif (newPage<=0) newPage = 1;\nif(newPage>=pages.length && areReading) newPage =pages.length-1;\nsetCurrPage((n)=>n=[newPage,newPage+1]);\n}\n\n//gose to a page\nconst goToPage=(num)=>{\nsetCurrPage((n)=>n=[num,num+1]);\n}\n\n\n\n//add new Pages\nconst addPages =async()=>{\nconst res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:currPage[0]});\n}\n\n//saves/updates the current pages\nconst updatePage =async(data)=>{\n  if(currPage[0]){\n  const pg1 = await reqPages('patch',`/books/${bookId}/pages/${currPage[0]}`,'page',{text:data.text},false);\n  const pg2 = await reqPages('patch',`/books/${bookId}/pages/${currPage[1]}`,'page',{text:data.text2},false);\n  }\n\n}\n\n\n  return <div className ='Book'>\n  {\n    pages[0] && !areReading?\n     <BookMark  bookId={bookId} username={currentUser.username} currPageId={pages[0].id} changePage={goToPage}/>\n     :null\n  }\n\n  <img className ='Book_cover' src={cover} alt=\"cover\"/>\n  <img className ='Book_pages' src={page} alt=\"pages\"/>\n\n  {\n     pages.length>0?\n      areReading?\n      <>\n      <Page changePage={changePage} page={[pages[currPage[0]-1],pages[currPage[1]-1]]}/>\n      </>\n      : <>\n      <InputPage changePage={changePage} savePage={updatePage} page={[...pages]}/>\n      </>\n    : null\n  }\n\n\n  </div>\n\n\n\n    //\n    //\n    //\n    // const [reqPages,pages,setPages] = useAxios([],true);\n    // const [currPage,setCurrPage]=useState([null,null]);\n    // let tempPages =[...pages];\n    // // console.log('currnt page nums',currPage[0],currPage[1]);\n    // // console.log(pages);\n    //\n    // useEffect(()=>{\n    //   // debugger;\n    // const getPages=async()=>{\n    //   const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n    //   // console.log(res);\n    //   if(res.data.length <=0) addPages();\n    //   // setPages(tempPages);\n    // }\n    // getPages();\n    // },[])\n    //\n    // //\n    // // useEffect(()=>{\n    // //   console.log('crr pages');\n    // //   setPages(tempPages);\n    // // // if(currPage[0] >= pages.length ){\n    // // //   console.log('add');\n    // // // addPages();\n    // // // }\n    // // },[currPage])\n    // //\n    //\n    //\n    // useEffect(()=>{\n    //   console.log('crr pages');\n    //   if(currPage[0]===null){\n    //       setCurrPage([0,1]);\n    //   }\n    //   else if(pages.length>0){\n    //     let newPage = currPage[0]!==null? currPage[0]+num_of_pages : num_of_pages;\n    //     if (newPage<0) newPage = 0;\n    //     if(newPage>=pages.length && areReading) newPage =pages.length-2;\n    //     setCurrPage([newPage,newPage+1]);\n    //   }\n    //   console.log(currPage);\n    // },[pages])\n    //\n    //\n    //\n    //\n    //\n    // const changePage =(num,data)=>{\n    //    // debugger;\n    // updatePage(data);\n    // if(currPage[0]+num_of_pages>=pages.length && !areReading){\n    //   addPages();\n    //   // return;\n    // }\n    // // let newPage = currPage[0]!==null? currPage[0]+num : num;\n    // // if (newPage<0) newPage = 0;\n    // // if(newPage>=pages.length && areReading) newPage =pages.length-2;\n    // // if(newPage>=pages.length && !areReading){\n    // //   addPages();\n    // //   return;\n    // // }\n    // setPages(tempPages);\n    // // setCurrPage([newPage,newPage+1]);\n    // }\n    //\n    //\n    //\n    // const addPages =async()=>{\n    //   console.log('add-- currnt page nums',currPage[0],currPage[1]);\n    //   console.log('add---- newpage nums',currPage[0]+2,currPage[1]+2);\n    //   const res= await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:currPage[0]+2},false);\n    //   console.log(tempPages);\n    //   tempPages=[...tempPages,...res];\n    //   // currPage[0]!==null? setCurrPage([currPage[0]+2,currPage[1]+2]) : setCurrPage([0,1]);\n    // }\n    //\n    //\n    // const updatePage =async(data)=>{\n    //   const pageId = pages[currPage[0]].id;\n    //   const pageId2 = pages[currPage[1]].id;\n    //   if(pageId && pageId2){\n    //     console.log('patch');\n    //   const pg1 = await reqPages('patch',`/books/${bookId}/pages/${pageId}`,'page',{text:data.text},false);\n    //   const pg2 = await reqPages('patch',`/books/${bookId}/pages/${pageId2}`,'page',{text:data.text2},false);\n    //   tempPages = pages.map(page=> {\n    //     if(page.id===pageId){\n    //       return pg1;\n    //     }\n    //     else if (page.id===pageId2) {\n    //       return pg2;\n    //     }\n    //     else {\n    //       return page;\n    //     }\n    //   })\n    //\n    //   }\n    //\n    // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//---------------------------------------------------------------------------------\n\n\n\n//\n// const [reqPages,pages,setPages]=useAxios([]);\n// const [pageNum,setPageNum]=useState([1,2]);//maybe later keep track of what page they were on last and add it to the book in the db\n//\n//\n// useEffect(()=>{\n//   console.log('first');\n//   const getPages = async()=>{\n//     const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n//      if(res.data.length<=0 && !areReading){\n//       const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n//     }\n//\n//   }\n//   getPages();\n// },[])\n//\n//\n//\n// const updatePage=async(text,pageId)=>{\n//   let res = await axios.patch(`/books/${bookId}/pages/${pageId}`,{text:text});\n//   console.log(res.data.id);\n//   if(res.data.id){\n//     // return res.data;\n//    setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n//   }\n// }\n//\n//\n// /// if text is different update them\n//\n// //change the page num\n//\n// //update the page num\n//\n// //this should cause a rerender and update the input to show the correct pages\n//\n//\n//\n// const changePage = async(page,num)=>{\n//\n//\n// console.log('page',page);\n// console.log('num',num);\n//   //\n//   // if(page.text != pages[pageNum[0]-1].text){\n//   //   await updatePage(page.text,pages[pageNum[0]-1].id);\n//   // }\n//   //\n//   // if(page.text2){\n//   //   if(page.text2 != pages[pageNum[1]-1].text){\n//   //     await updatePage(page.text2,pages[pageNum[1]-1].id);\n//   //   }\n//   // }\n//\n//   if(pageNum[1]+num > pages.length){\n//     if(!areReading){\n//       console.log('is not reading  is grater than length');\n//       console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n//         setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n//     }\n//   }\n//   else if(pageNum[0]+num > 0){\n//     console.log('is grater than zero');\n//     console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n//       setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n//   }\n// }\n//\n//\n//\n// const addPage =async()=>{\n//   const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n// }\n//\n//\n//\n//\n//\n// return <div className ='Book'>\n//\n// <img className ='Book_cover' src={cover} alt=\"cover\"/>\n// <img className ='Book_pages' src={page} alt=\"pages\"/>\n//\n//\n//\n// {\n//   pages.length>0?\n//     areReading?\n//     <>\n//     <Page pageNum={pageNum[0]} changePage={changePage} text={pages[pageNum[0]-1].text}/> <Page pageNum={pageNum[1]} changePage={changePage} text={pages[pageNum[1]-1].text}/>\n//     </>\n//     : <>\n//     <InputPage pageNum={pageNum[0]} changePage={changePage} text={[pages[pageNum[0]-1].text,pages[pageNum[1]-1].text]} isTwoPages={true}/>\n//     </>\n//   : null\n// }\n//\n//\n// </div>\n}\n\nexport default Book;\n"],"mappings":"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ACJ,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA;IAAE,iBAC/E,gBACD;MAAA,uBACF,QAAC,SAAS;QAAC,UAAU,EAAEY,UAAW;QAAC,QAAQ,EAAEE,UAAW;QAAC,IAAI,EAAE,CAAC,GAAGlB,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA;IAAE,iBACzE,GACH,IAAI;EAAA;IAAA;IAAA;IAAA;EAAA,QAIF;;EAIJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAklWKP,IAAI;EAAA,QAGSV,WAAW,EACIS,QAAQ,EACnBA,QAAQ;AAAA;AAAA,KALzBC,IAAI;AAoWV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}