{"ast":null,"code":"var _jsxFileName = \"/Users/rosepowell/Desktop/Book_Writing/book_writing/src/books/Book.js\",\n  _s = $RefreshSig$();\nimport cover from '../sprites/OpenBook1.png';\nimport page from '../sprites/OpenBookPages.png';\nimport { useState, useEffect } from 'react';\nimport InputPage from '../pages/InputPage';\nimport Page from './Page';\nimport axios from 'axios';\nimport useAxios from '../hooks/useAxios';\nimport '../css/Book.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Book = _ref => {\n  _s();\n  let {\n    areReading,\n    bookId,\n    num_of_pages = 2\n  } = _ref;\n  const [reqPages, pages, setPages] = useAxios([], true);\n  const [currPage, setCurrPage] = useState([0, 1]);\n  let tempPages = [...pages];\n  console.log('currnt page nums', currPage[0], currPage[1]);\n  console.log(pages);\n  useEffect(() => {\n    // debugger;\n    const getPages = async () => {\n      const res = await reqPages('get', `/books/${bookId}/pages`, 'pages');\n      // console.log(res);\n      if (res.data.length <= 0) addPages();\n    };\n    getPages();\n  }, []);\n\n  //\n  // useEffect(()=>{\n  //   console.log('crr pages');\n  //   setPages(tempPages);\n  // // if(currPage[0] >= pages.length ){\n  // //   console.log('add');\n  // // addPages();\n  // // }\n  // },[currPage])\n  //\n\n  useEffect(() => {\n    console.log('crr pages');\n    if (pages.length > 0) {\n      let newPage = currPage[0] !== null ? currPage[0] + num_of_pages : num_of_pages;\n      if (newPage < 0) newPage = 0;\n      if (newPage >= pages.length && areReading) newPage = pages.length - 2;\n      setCurrPage([newPage, newPage + 1]);\n    }\n  }, [pages]);\n  const changePage = (num, data) => {\n    // debugger;\n    updatePage(data);\n    if (currPage[0] + num_of_pages >= pages.length && !areReading) {\n      addPages();\n      return;\n    }\n    // let newPage = currPage[0]!==null? currPage[0]+num : num;\n    // if (newPage<0) newPage = 0;\n    // if(newPage>=pages.length && areReading) newPage =pages.length-2;\n    // if(newPage>=pages.length && !areReading){\n    //   addPages();\n    //   return;\n    // }\n    setPages(tempPages);\n    // setCurrPage([newPage,newPage+1]);\n  };\n\n  const addPages = async () => {\n    console.log('add-- currnt page nums', currPage[0], currPage[1]);\n    console.log('add---- newpage nums', currPage[0] + 2, currPage[1] + 2);\n    const res = await reqPages('post', `/books/${bookId}/pages`, 'pages', {\n      num_of_pages: 2,\n      page_num: currPage[0] + 2\n    }, false);\n    tempPages = [...tempPages, ...res];\n    // currPage[0]!==null? setCurrPage([currPage[0]+2,currPage[1]+2]) : setCurrPage([0,1]);\n  };\n\n  const updatePage = async data => {\n    const pageId = pages[currPage[0]].id;\n    const pageId2 = pages[currPage[1]].id;\n    if (pageId && pageId2) {\n      console.log('patch');\n      const pg1 = await reqPages('patch', `/books/${bookId}/pages/${pageId}`, 'page', {\n        text: data.text\n      }, false);\n      const pg2 = await reqPages('patch', `/books/${bookId}/pages/${pageId2}`, 'page', {\n        text: data.text2\n      }, false);\n      tempPages = pages.map(page => {\n        if (page.id === pageId) {\n          return pg1;\n        } else if (page.id === pageId2) {\n          return pg2;\n        } else {\n          return page;\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Book\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_cover\",\n      src: cover,\n      alt: \"cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_pages\",\n      src: page,\n      alt: \"pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 3\n    }, this), pages && pages[currPage[1]] ? areReading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Page, {\n        pageNum: currPage[0] + 1,\n        changePage: changePage,\n        text: pages[currPage[0]].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Page, {\n        pageNum: currPage[1],\n        changePage: changePage,\n        text: pages[currPage[1]].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 94\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(InputPage, {\n        pageNum: currPage[0] + 1,\n        changePage: changePage,\n        text: [pages[currPage[0]].text, pages[currPage[1]].text],\n        isTwoPages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this)\n    }, void 0, false) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n\n  //\n  // const [reqPages,pages,setPages]=useAxios([]);\n  // const [pageNum,setPageNum]=useState([1,2]);//maybe later keep track of what page they were on last and add it to the book in the db\n  //\n  //\n  // useEffect(()=>{\n  //   console.log('first');\n  //   const getPages = async()=>{\n  //     const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n  //      if(res.data.length<=0 && !areReading){\n  //       const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n  //     }\n  //\n  //   }\n  //   getPages();\n  // },[])\n  //\n  //\n  //\n  // const updatePage=async(text,pageId)=>{\n  //   let res = await axios.patch(`/books/${bookId}/pages/${pageId}`,{text:text});\n  //   console.log(res.data.id);\n  //   if(res.data.id){\n  //     // return res.data;\n  //    setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n  //   }\n  // }\n  //\n  //\n  // /// if text is different update them\n  //\n  // //change the page num\n  //\n  // //update the page num\n  //\n  // //this should cause a rerender and update the input to show the correct pages\n  //\n  //\n  //\n  // const changePage = async(page,num)=>{\n  //\n  //\n  // console.log('page',page);\n  // console.log('num',num);\n  //   //\n  //   // if(page.text != pages[pageNum[0]-1].text){\n  //   //   await updatePage(page.text,pages[pageNum[0]-1].id);\n  //   // }\n  //   //\n  //   // if(page.text2){\n  //   //   if(page.text2 != pages[pageNum[1]-1].text){\n  //   //     await updatePage(page.text2,pages[pageNum[1]-1].id);\n  //   //   }\n  //   // }\n  //\n  //   if(pageNum[1]+num > pages.length){\n  //     if(!areReading){\n  //       console.log('is not reading  is grater than length');\n  //       console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n  //         setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n  //     }\n  //   }\n  //   else if(pageNum[0]+num > 0){\n  //     console.log('is grater than zero');\n  //     console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n  //       setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n  //   }\n  // }\n  //\n  //\n  //\n  // const addPage =async()=>{\n  //   const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n  // }\n  //\n  //\n  //\n  //\n  //\n  // return <div className ='Book'>\n  //\n  // <img className ='Book_cover' src={cover} alt=\"cover\"/>\n  // <img className ='Book_pages' src={page} alt=\"pages\"/>\n  //\n  //\n  //\n  // {\n  //   pages.length>0?\n  //     areReading?\n  //     <>\n  //     <Page pageNum={pageNum[0]} changePage={changePage} text={pages[pageNum[0]-1].text}/> <Page pageNum={pageNum[1]} changePage={changePage} text={pages[pageNum[1]-1].text}/>\n  //     </>\n  //     : <>\n  //     <InputPage pageNum={pageNum[0]} changePage={changePage} text={[pages[pageNum[0]-1].text,pages[pageNum[1]-1].text]} isTwoPages={true}/>\n  //     </>\n  //   : null\n  // }\n  //\n  //\n  // </div>\n};\n_s(Book, \"FrP9XxoQ6fuZ+a80t44lu6oi83M=\", false, function () {\n  return [useAxios];\n});\n_c = Book;\nexport default Book;\nvar _c;\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"names":["cover","page","useState","useEffect","InputPage","Page","axios","useAxios","Book","areReading","bookId","num_of_pages","reqPages","pages","setPages","currPage","setCurrPage","tempPages","console","log","getPages","res","data","length","addPages","newPage","changePage","num","updatePage","page_num","pageId","id","pageId2","pg1","text","pg2","text2","map"],"sources":["/Users/rosepowell/Desktop/Book_Writing/book_writing/src/books/Book.js"],"sourcesContent":["import cover from '../sprites/OpenBook1.png'\nimport page from '../sprites/OpenBookPages.png'\nimport {useState,useEffect} from 'react';\nimport InputPage from '../pages/InputPage'\nimport Page from './Page'\nimport axios from 'axios';\nimport useAxios from '../hooks/useAxios';\nimport '../css/Book.css';\nconst Book =({areReading,bookId,num_of_pages=2})=>{\n\n\n\n  const [reqPages,pages,setPages] = useAxios([],true);\n  const [currPage,setCurrPage]=useState([0,1]);\n  let tempPages =[...pages];\n  console.log('currnt page nums',currPage[0],currPage[1]);\n  console.log(pages);\n\n  useEffect(()=>{\n    // debugger;\n  const getPages=async()=>{\n    const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n    // console.log(res);\n    if(res.data.length <=0) addPages();\n\n  }\n  getPages();\n  },[])\n\n  //\n  // useEffect(()=>{\n  //   console.log('crr pages');\n  //   setPages(tempPages);\n  // // if(currPage[0] >= pages.length ){\n  // //   console.log('add');\n  // // addPages();\n  // // }\n  // },[currPage])\n  //\n\n\n  useEffect(()=>{\n    console.log('crr pages');\n    if(pages.length>0){\n      let newPage = currPage[0]!==null? currPage[0]+num_of_pages : num_of_pages;\n      if (newPage<0) newPage = 0;\n      if(newPage>=pages.length && areReading) newPage =pages.length-2;\n      setCurrPage([newPage,newPage+1]);\n    }\n  },[pages])\n\n\n  const changePage =(num,data)=>{\n     // debugger;\n  updatePage(data);\n  if(currPage[0]+num_of_pages>=pages.length && !areReading){\n    addPages();\n    return;\n  }\n  // let newPage = currPage[0]!==null? currPage[0]+num : num;\n  // if (newPage<0) newPage = 0;\n  // if(newPage>=pages.length && areReading) newPage =pages.length-2;\n  // if(newPage>=pages.length && !areReading){\n  //   addPages();\n  //   return;\n  // }\n  setPages(tempPages);\n  // setCurrPage([newPage,newPage+1]);\n  }\n\n\n\n  const addPages =async()=>{\n    console.log('add-- currnt page nums',currPage[0],currPage[1]);\n    console.log('add---- newpage nums',currPage[0]+2,currPage[1]+2);\n    const res= await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:currPage[0]+2},false);\n    tempPages=[...tempPages,...res];\n    // currPage[0]!==null? setCurrPage([currPage[0]+2,currPage[1]+2]) : setCurrPage([0,1]);\n  }\n\n\n  const updatePage =async(data)=>{\n    const pageId = pages[currPage[0]].id;\n    const pageId2 = pages[currPage[1]].id;\n    if(pageId && pageId2){\n      console.log('patch');\n    const pg1 = await reqPages('patch',`/books/${bookId}/pages/${pageId}`,'page',{text:data.text},false);\n    const pg2 = await reqPages('patch',`/books/${bookId}/pages/${pageId2}`,'page',{text:data.text2},false);\n    tempPages = pages.map(page=> {\n      if(page.id===pageId){\n        return pg1;\n      }\n      else if (page.id===pageId2) {\n        return pg2;\n      }\n      else {\n        return page;\n      }\n    })\n\n    }\n\n  }\n\n\n\n  return <div className ='Book'>\n\n  <img className ='Book_cover' src={cover} alt=\"cover\"/>\n  <img className ='Book_pages' src={page} alt=\"pages\"/>\n\n\n  {\n    pages && pages[currPage[1]]?\n      areReading?\n      <>\n      <Page pageNum={currPage[0]+1} changePage={changePage} text={pages[currPage[0]].text}/> <Page pageNum={currPage[1]} changePage={changePage} text={pages[currPage[1]].text}/>\n      </>\n      : <>\n      <InputPage pageNum={currPage[0]+1} changePage={changePage} text={[pages[currPage[0]].text, pages[currPage[1]].text]} isTwoPages={true}/>\n      </>\n    : null\n  }\n\n\n  </div>\n\n\n\n\n\n\n\n\n\n\n\n\n//\n// const [reqPages,pages,setPages]=useAxios([]);\n// const [pageNum,setPageNum]=useState([1,2]);//maybe later keep track of what page they were on last and add it to the book in the db\n//\n//\n// useEffect(()=>{\n//   console.log('first');\n//   const getPages = async()=>{\n//     const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n//      if(res.data.length<=0 && !areReading){\n//       const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n//     }\n//\n//   }\n//   getPages();\n// },[])\n//\n//\n//\n// const updatePage=async(text,pageId)=>{\n//   let res = await axios.patch(`/books/${bookId}/pages/${pageId}`,{text:text});\n//   console.log(res.data.id);\n//   if(res.data.id){\n//     // return res.data;\n//    setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n//   }\n// }\n//\n//\n// /// if text is different update them\n//\n// //change the page num\n//\n// //update the page num\n//\n// //this should cause a rerender and update the input to show the correct pages\n//\n//\n//\n// const changePage = async(page,num)=>{\n//\n//\n// console.log('page',page);\n// console.log('num',num);\n//   //\n//   // if(page.text != pages[pageNum[0]-1].text){\n//   //   await updatePage(page.text,pages[pageNum[0]-1].id);\n//   // }\n//   //\n//   // if(page.text2){\n//   //   if(page.text2 != pages[pageNum[1]-1].text){\n//   //     await updatePage(page.text2,pages[pageNum[1]-1].id);\n//   //   }\n//   // }\n//\n//   if(pageNum[1]+num > pages.length){\n//     if(!areReading){\n//       console.log('is not reading  is grater than length');\n//       console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n//         setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n//     }\n//   }\n//   else if(pageNum[0]+num > 0){\n//     console.log('is grater than zero');\n//     console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n//       setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n//   }\n// }\n//\n//\n//\n// const addPage =async()=>{\n//   const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n// }\n//\n//\n//\n//\n//\n// return <div className ='Book'>\n//\n// <img className ='Book_cover' src={cover} alt=\"cover\"/>\n// <img className ='Book_pages' src={page} alt=\"pages\"/>\n//\n//\n//\n// {\n//   pages.length>0?\n//     areReading?\n//     <>\n//     <Page pageNum={pageNum[0]} changePage={changePage} text={pages[pageNum[0]-1].text}/> <Page pageNum={pageNum[1]} changePage={changePage} text={pages[pageNum[1]-1].text}/>\n//     </>\n//     : <>\n//     <InputPage pageNum={pageNum[0]} changePage={changePage} text={[pages[pageNum[0]-1].text,pages[pageNum[1]-1].text]} isTwoPages={true}/>\n//     </>\n//   : null\n// }\n//\n//\n// </div>\n}\n\nexport default Book;\n"],"mappings":"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,gBACxK,gBACD;MAAA,uBACF,QAAC,SAAS;QAAC,OAAO,EAAEnB,QAAQ,CAAC,CAAC,CAAC,GAAC,CAAE;QAAC,UAAU,EAAEW,UAAW;QAAC,IAAI,EAAE,CAACb,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACmB,IAAI,EAAErB,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACmB,IAAI,CAAE;QAAC,UAAU,EAAE;MAAK;QAAA;QAAA;QAAA;MAAA;IAAE,iBACrI,GACH,IAAI;EAAA;IAAA;IAAA;IAAA;EAAA,QAIF;;EAaR;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA,CAAC;AAAA,GAtOK1B,IAAI;EAAA,QAI0BD,QAAQ;AAAA;AAAA,KAJtCC,IAAI;AAwOV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}