{"ast":null,"code":"var _jsxFileName = \"/Users/rosepowell/Desktop/Book_Writing/book_writing/src/Book.js\",\n  _s = $RefreshSig$();\nimport cover from './sprites/OpenBook1.png';\nimport page from './sprites/OpenBookPages.png';\nimport { useState, useEffect } from 'react';\nimport InputPage from './InputPage';\nimport Page from './Page';\nimport axios from 'axios';\nimport useAxios from './hooks/useAxios';\nimport './css/Book.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Book = _ref => {\n  _s();\n  let {\n    areReading,\n    bookId\n  } = _ref;\n  const [reqPages, pages, setPages] = useAxios([], true);\n  const [currPage, setCurrPage] = useState([null, null]);\n  console.log(pages);\n  useEffect(() => {\n    const getPages = async () => {\n      const res = await reqPages('get', `/books/${bookId}/pages`, 'pages');\n      console.log(res);\n      res.data.length <= 0 ? addPages() : setCurrPage([0, 1]);\n    };\n    getPages();\n  }, []);\n  const changePage = (num, data) => {\n    updatePage(data);\n    let newPage = currPage[0] ? currPage[0] + num : num;\n    if (newPage < 0) newPage = 0;\n    if (newPage > pages.length && areReading) newPage = pages.length - 2;\n    if (newPage > pages.length && !areReading) {\n      addPages();\n      return;\n    }\n    setCurrPage([newPage, newPage++]);\n  };\n  const addPages = async () => {\n    reqPages('post', `/books/${bookId}/pages`, 'pages', {\n      num_of_pages: 2,\n      page_num: currPage[0] + 2\n    });\n    currPage[0] ? setCurrPage([currPage[0] + 2, currPage[1] + 2]) : setCurrPage([0, 1]);\n  };\n  const updatePage = async data => {\n    const pageId = pages[currPage[0]].id;\n    const pageId2 = pages[currPage[1]].id;\n    reqPages('patch', `/books/${bookId}/pages/${pageId}`, 'page', {\n      text: data.text\n    });\n    reqPages('patch', `/books/${bookId}/pages/${pageId2}`, 'page', {\n      text: data.text2\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Book\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_cover\",\n      src: cover,\n      alt: \"cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_pages\",\n      src: page,\n      alt: \"pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }, this), pages && pages[currPage[1]] ? areReading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Page, {\n        pageNum: currPage[0] + 1,\n        changePage: changePage,\n        text: pages[currPage[0]].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Page, {\n        pageNum: currPage[1],\n        changePage: changePage,\n        text: pages[currPage[1]].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 94\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(InputPage, {\n        pageNum: currPage[0] + 1,\n        changePage: changePage,\n        text: [pages[currPage[0]].text, pages[currPage[1]].text],\n        isTwoPages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)\n    }, void 0, false) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n\n  //\n  // const [reqPages,pages,setPages]=useAxios([]);\n  // const [pageNum,setPageNum]=useState([1,2]);//maybe later keep track of what page they were on last and add it to the book in the db\n  //\n  //\n  // useEffect(()=>{\n  //   console.log('first');\n  //   const getPages = async()=>{\n  //     const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n  //      if(res.data.length<=0 && !areReading){\n  //       const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n  //     }\n  //\n  //   }\n  //   getPages();\n  // },[])\n  //\n  //\n  //\n  // const updatePage=async(text,pageId)=>{\n  //   let res = await axios.patch(`/books/${bookId}/pages/${pageId}`,{text:text});\n  //   console.log(res.data.id);\n  //   if(res.data.id){\n  //     // return res.data;\n  //    setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n  //   }\n  // }\n  //\n  //\n  // /// if text is different update them\n  //\n  // //change the page num\n  //\n  // //update the page num\n  //\n  // //this should cause a rerender and update the input to show the correct pages\n  //\n  //\n  //\n  // const changePage = async(page,num)=>{\n  //\n  //\n  // console.log('page',page);\n  // console.log('num',num);\n  //   //\n  //   // if(page.text != pages[pageNum[0]-1].text){\n  //   //   await updatePage(page.text,pages[pageNum[0]-1].id);\n  //   // }\n  //   //\n  //   // if(page.text2){\n  //   //   if(page.text2 != pages[pageNum[1]-1].text){\n  //   //     await updatePage(page.text2,pages[pageNum[1]-1].id);\n  //   //   }\n  //   // }\n  //\n  //   if(pageNum[1]+num > pages.length){\n  //     if(!areReading){\n  //       console.log('is not reading  is grater than length');\n  //       console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n  //         setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n  //     }\n  //   }\n  //   else if(pageNum[0]+num > 0){\n  //     console.log('is grater than zero');\n  //     console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n  //       setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n  //   }\n  // }\n  //\n  //\n  //\n  // const addPage =async()=>{\n  //   const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n  // }\n  //\n  //\n  //\n  //\n  //\n  // return <div className ='Book'>\n  //\n  // <img className ='Book_cover' src={cover} alt=\"cover\"/>\n  // <img className ='Book_pages' src={page} alt=\"pages\"/>\n  //\n  //\n  //\n  // {\n  //   pages.length>0?\n  //     areReading?\n  //     <>\n  //     <Page pageNum={pageNum[0]} changePage={changePage} text={pages[pageNum[0]-1].text}/> <Page pageNum={pageNum[1]} changePage={changePage} text={pages[pageNum[1]-1].text}/>\n  //     </>\n  //     : <>\n  //     <InputPage pageNum={pageNum[0]} changePage={changePage} text={[pages[pageNum[0]-1].text,pages[pageNum[1]-1].text]} isTwoPages={true}/>\n  //     </>\n  //   : null\n  // }\n  //\n  //\n  // </div>\n};\n_s(Book, \"MQgV2HE2Py+M/wJirv0BFGrMuMs=\", false, function () {\n  return [useAxios];\n});\n_c = Book;\nexport default Book;\nvar _c;\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"names":["cover","page","useState","useEffect","InputPage","Page","axios","useAxios","Book","areReading","bookId","reqPages","pages","setPages","currPage","setCurrPage","console","log","getPages","res","data","length","addPages","changePage","num","updatePage","newPage","num_of_pages","page_num","pageId","id","pageId2","text","text2"],"sources":["/Users/rosepowell/Desktop/Book_Writing/book_writing/src/Book.js"],"sourcesContent":["import cover from './sprites/OpenBook1.png'\nimport page from './sprites/OpenBookPages.png'\nimport {useState,useEffect} from 'react';\nimport InputPage from './InputPage'\nimport Page from './Page'\nimport axios from 'axios';\nimport useAxios from './hooks/useAxios';\nimport './css/Book.css';\nconst Book =({areReading,bookId})=>{\n\n\n\n  const [reqPages,pages,setPages] = useAxios([],true);\n  const [currPage,setCurrPage]=useState([null,null]);\n\n\n  console.log(pages);\n\n  useEffect(()=>{\n\n  const getPages=async()=>{\n    const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n    console.log(res);\n    res.data.length <=0? addPages():setCurrPage([0,1]);\n\n  }\n  getPages();\n  },[])\n\n\n  const changePage =(num,data)=>{\n  updatePage(data);\n  let newPage = currPage[0]? currPage[0]+num : num;\n  if (newPage<0) newPage = 0;\n  if(newPage>pages.length && areReading) newPage =pages.length-2;\n  if(newPage>pages.length && !areReading){\n    addPages();\n    return;\n  }\n  setCurrPage([newPage,newPage++]);\n  }\n\n\n\n  const addPages =async()=>{\n    reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:currPage[0]+2});\n    currPage[0]? setCurrPage([currPage[0]+2,currPage[1]+2]) : setCurrPage([0,1]);\n  }\n\n\n  const updatePage =async(data)=>{\n    const pageId = pages[currPage[0]].id\n    const pageId2 = pages[currPage[1]].id\n      reqPages('patch',`/books/${bookId}/pages/${pageId}`,'page',{text:data.text});\n      reqPages('patch',`/books/${bookId}/pages/${pageId2}`,'page',{text:data.text2});\n  }\n\n\n\n  return <div className ='Book'>\n\n  <img className ='Book_cover' src={cover} alt=\"cover\"/>\n  <img className ='Book_pages' src={page} alt=\"pages\"/>\n\n\n  {\n    pages && pages[currPage[1]]?\n      areReading?\n      <>\n      <Page pageNum={currPage[0]+1} changePage={changePage} text={pages[currPage[0]].text}/> <Page pageNum={currPage[1]} changePage={changePage} text={pages[currPage[1]].text}/>\n      </>\n      : <>\n      <InputPage pageNum={currPage[0]+1} changePage={changePage} text={[pages[currPage[0]].text, pages[currPage[1]].text]} isTwoPages={true}/>\n      </>\n    : null\n  }\n\n\n  </div>\n\n\n\n\n\n\n\n\n\n\n\n\n//\n// const [reqPages,pages,setPages]=useAxios([]);\n// const [pageNum,setPageNum]=useState([1,2]);//maybe later keep track of what page they were on last and add it to the book in the db\n//\n//\n// useEffect(()=>{\n//   console.log('first');\n//   const getPages = async()=>{\n//     const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n//      if(res.data.length<=0 && !areReading){\n//       const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n//     }\n//\n//   }\n//   getPages();\n// },[])\n//\n//\n//\n// const updatePage=async(text,pageId)=>{\n//   let res = await axios.patch(`/books/${bookId}/pages/${pageId}`,{text:text});\n//   console.log(res.data.id);\n//   if(res.data.id){\n//     // return res.data;\n//    setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n//   }\n// }\n//\n//\n// /// if text is different update them\n//\n// //change the page num\n//\n// //update the page num\n//\n// //this should cause a rerender and update the input to show the correct pages\n//\n//\n//\n// const changePage = async(page,num)=>{\n//\n//\n// console.log('page',page);\n// console.log('num',num);\n//   //\n//   // if(page.text != pages[pageNum[0]-1].text){\n//   //   await updatePage(page.text,pages[pageNum[0]-1].id);\n//   // }\n//   //\n//   // if(page.text2){\n//   //   if(page.text2 != pages[pageNum[1]-1].text){\n//   //     await updatePage(page.text2,pages[pageNum[1]-1].id);\n//   //   }\n//   // }\n//\n//   if(pageNum[1]+num > pages.length){\n//     if(!areReading){\n//       console.log('is not reading  is grater than length');\n//       console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n//         setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n//     }\n//   }\n//   else if(pageNum[0]+num > 0){\n//     console.log('is grater than zero');\n//     console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n//       setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n//   }\n// }\n//\n//\n//\n// const addPage =async()=>{\n//   const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n// }\n//\n//\n//\n//\n//\n// return <div className ='Book'>\n//\n// <img className ='Book_cover' src={cover} alt=\"cover\"/>\n// <img className ='Book_pages' src={page} alt=\"pages\"/>\n//\n//\n//\n// {\n//   pages.length>0?\n//     areReading?\n//     <>\n//     <Page pageNum={pageNum[0]} changePage={changePage} text={pages[pageNum[0]-1].text}/> <Page pageNum={pageNum[1]} changePage={changePage} text={pages[pageNum[1]-1].text}/>\n//     </>\n//     : <>\n//     <InputPage pageNum={pageNum[0]} changePage={changePage} text={[pages[pageNum[0]-1].text,pages[pageNum[1]-1].text]} isTwoPages={true}/>\n//     </>\n//   : null\n// }\n//\n//\n// </div>\n}\n\nexport default Book;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}