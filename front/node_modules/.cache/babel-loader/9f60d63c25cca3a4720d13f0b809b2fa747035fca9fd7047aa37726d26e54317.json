{"ast":null,"code":"var _jsxFileName = \"/Users/rosepowell/Desktop/Book_Writing/book_writing/src/Book.js\",\n  _s = $RefreshSig$();\nimport cover from './sprites/OpenBook1.png';\nimport page from './sprites/OpenBookPages.png';\nimport { useState, useEffect } from 'react';\nimport InputPage from './InputPage';\nimport Page from './Page';\nimport axios from 'axios';\nimport useAxios from './hooks/useAxios';\nimport './css/Book.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Book = _ref => {\n  _s();\n  let {\n    areReading,\n    bookId\n  } = _ref;\n  const [reqPages, pages, setPages] = useAxios([]);\n  const [pageNum, setPageNum] = useState([1, 2]); //maybe later keep track of what page they were on last and add it to the book in the db\n  const [currPage, setCurrPage] = useState(null);\n  useEffect(() => {\n    const getPages = async () => {\n      const res = await reqPages('get', `/books/${bookId}/pages`, 'pages');\n      if (res.data.length <= 0 && !areReading) {\n        addPage();\n      }\n    };\n    getPages();\n  }, []);\n  useEffect(() => {\n    const getPage = async () => {\n      if (pageNum[1] <= pages.length) {\n        setCurrPage();\n      } else {\n        addPage();\n      }\n    };\n    getPage();\n  }, [pageNum]);\n  const updatePage = async (text, pageId) => {\n    let res = await axios.patch(`/books/${bookId}/pages/${pageId}`, {\n      text: text\n    });\n    console.log(res.data.id);\n    if (res.data.id) {\n      // return res.data;\n      setPages(n => n = pages.map(page => page.id === res.data.id ? res.data : page));\n    }\n  };\n\n  /// if text is different update them\n\n  //change the page num\n\n  //update the page num\n\n  //this should cause a rerender and update the input to show the correct pages\n\n  const changePage = async (page, num) => {\n    console.log('page', page);\n    console.log('num', num);\n    //\n    // if(page.text != pages[pageNum[0]-1].text){\n    //   await updatePage(page.text,pages[pageNum[0]-1].id);\n    // }\n    //\n    // if(page.text2){\n    //   if(page.text2 != pages[pageNum[1]-1].text){\n    //     await updatePage(page.text2,pages[pageNum[1]-1].id);\n    //   }\n    // }\n\n    if (pageNum[1] + num > pages.length) {\n      if (!areReading) {\n        console.log('is not reading  is grater than length');\n        console.log('new page nums', [pageNum[0] + num, pageNum[1] + num]);\n        setPageNum(n => n = [pageNum[0] + num, pageNum[1] + num]);\n      }\n    } else if (pageNum[0] + num > 0) {\n      console.log('is grater than zero');\n      console.log('new page nums', [pageNum[0] + num, pageNum[1] + num]);\n      setPageNum(n => n = [pageNum[0] + num, pageNum[1] + num]);\n    }\n  };\n  const addPage = async () => {\n    const res = await reqPages('post', `/books/${bookId}/pages`, 'pages', {\n      num_of_pages: 2,\n      page_num: pageNum[0]\n    });\n    setCurrPage(res.data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Book\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_cover\",\n      src: cover,\n      alt: \"cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"Book_pages\",\n      src: page,\n      alt: \"pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 1\n    }, this), pages ? areReading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Page, {\n        pageNum: pageNum[0],\n        changePage: changePage,\n        text: pages[pageNum[0] - 1].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Page, {\n        pageNum: pageNum[1],\n        changePage: changePage,\n        text: pages[pageNum[1] - 1].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 90\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(InputPage, {\n        pageNum: pageNum[0],\n        changePage: changePage,\n        text: [pages[pageNum[0] - 1].text, pages[pageNum[1] - 1].text],\n        isTwoPages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }, this)\n    }, void 0, false) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 8\n  }, this);\n};\n_s(Book, \"N1JBEOKrE27T7qD+UigZpyCSK8M=\", false, function () {\n  return [useAxios];\n});\n_c = Book;\nexport default Book;\nvar _c;\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"names":["cover","page","useState","useEffect","InputPage","Page","axios","useAxios","Book","areReading","bookId","reqPages","pages","setPages","pageNum","setPageNum","currPage","setCurrPage","getPages","res","data","length","addPage","getPage","updatePage","text","pageId","patch","console","log","id","n","map","changePage","num","num_of_pages","page_num"],"sources":["/Users/rosepowell/Desktop/Book_Writing/book_writing/src/Book.js"],"sourcesContent":["import cover from './sprites/OpenBook1.png'\nimport page from './sprites/OpenBookPages.png'\nimport {useState,useEffect} from 'react';\nimport InputPage from './InputPage'\nimport Page from './Page'\nimport axios from 'axios';\nimport useAxios from './hooks/useAxios';\nimport './css/Book.css';\nconst Book =({areReading,bookId})=>{\n\nconst [reqPages,pages,setPages]=useAxios([]);\nconst [pageNum,setPageNum]=useState([1,2]);//maybe later keep track of what page they were on last and add it to the book in the db\nconst [currPage,setCurrPage]=useState(null);\n\nuseEffect(()=>{\n  const getPages = async()=>{\n    const res = await reqPages('get',`/books/${bookId}/pages`,'pages');\n     if(res.data.length<=0 && !areReading){\n      addPage();\n    }\n\n  }\n  getPages();\n},[])\n\n\nuseEffect(()=>{\n  const getPage = async()=>{\n    if(pageNum[1] <= pages.length){\n      setCurrPage();\n    }else{\n      addPage();\n    }\n  }\n  getPage();\n\n},[pageNum])\n\n\n\nconst updatePage=async(text,pageId)=>{\n  let res = await axios.patch(`/books/${bookId}/pages/${pageId}`,{text:text});\n  console.log(res.data.id);\n  if(res.data.id){\n    // return res.data;\n   setPages((n)=> n= pages.map(page=> page.id === res.data.id? res.data: page));\n  }\n}\n\n\n/// if text is different update them\n\n//change the page num\n\n//update the page num\n\n//this should cause a rerender and update the input to show the correct pages\n\n\n\nconst changePage = async(page,num)=>{\n\n\nconsole.log('page',page);\nconsole.log('num',num);\n  //\n  // if(page.text != pages[pageNum[0]-1].text){\n  //   await updatePage(page.text,pages[pageNum[0]-1].id);\n  // }\n  //\n  // if(page.text2){\n  //   if(page.text2 != pages[pageNum[1]-1].text){\n  //     await updatePage(page.text2,pages[pageNum[1]-1].id);\n  //   }\n  // }\n\n  if(pageNum[1]+num > pages.length){\n    if(!areReading){\n      console.log('is not reading  is grater than length');\n      console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n        setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n    }\n  }\n  else if(pageNum[0]+num > 0){\n    console.log('is grater than zero');\n    console.log('new page nums',[pageNum[0]+num,pageNum[1]+num]);\n      setPageNum((n)=> n=[pageNum[0]+num,pageNum[1]+num]);\n  }\n}\n\n\n\nconst addPage =async()=>{\n  const res = await reqPages('post',`/books/${bookId}/pages`,'pages',{num_of_pages:2,page_num:pageNum[0]});\n  setCurrPage(res.data);\n}\n\n\n\n\n\nreturn <div className ='Book'>\n\n<img className ='Book_cover' src={cover} alt=\"cover\"/>\n<img className ='Book_pages' src={page} alt=\"pages\"/>\n\n\n\n{\n  pages?\n    areReading?\n    <>\n    <Page pageNum={pageNum[0]} changePage={changePage} text={pages[pageNum[0]-1].text}/> <Page pageNum={pageNum[1]} changePage={changePage} text={pages[pageNum[1]-1].text}/>\n    </>\n    : <>\n    <InputPage pageNum={pageNum[0]} changePage={changePage} text={[pages[pageNum[0]-1].text,pages[pageNum[1]-1].text]} isTwoPages={true}/>\n    </>\n  : null\n}\n\n\n</div>\n}\n\nexport default Book;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}