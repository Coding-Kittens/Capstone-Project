{"ast":null,"code":"var _jsxFileName = \"/Users/rosepowell/Desktop/Book_Writing/book_writing/front/src/books/Book.js\",\n  _s = $RefreshSig$();\nimport cover from \"../sprites/OpenBook1.png\";\nimport page from \"../sprites/OpenBookPages.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState, useEffect, useContext } from \"react\";\nimport InputPage from \"./InputPage\";\nimport BookMark from \"../books/BookMark\";\nimport { UserContext, MessageContext } from \"../context/context\";\nimport Page from \"./Page\";\nimport useAxios from \"../hooks/useAxios\";\nimport \"../css/Book.css\";\n\n//keeps track of what page the user is on\n//\n// if they are reading the book gets all the pages for it\n//\n//  if not gets the page by page num when going to the next page\n//   add pages when there are no more Pages\n//   updates the pages when changeing pages and when user presses save\n///////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Book = _ref => {\n  _s();\n  let {\n    areReading,\n    bookId\n  } = _ref;\n  const currentUser = useContext(UserContext);\n  const setMessage = useContext(MessageContext).setMessage;\n  const navigate = useNavigate();\n  const [reqPages, pages, setPages] = useAxios([], areReading);\n  const [reqBook] = useAxios(null);\n  const [currPage, setCurrPage] = useState([1, 2]);\n\n  //when the component first renders\n  // gets all the pages in the book, if the user is reading the book\n  useEffect(() => {\n    const getPages = async () => {\n      if (areReading) {\n        const res = await reqPages(\"get\", `/books/${bookId}/pages/all`, \"pages\");\n        if (res.data.length <= 0) navigate(`/`);\n        setMessage({\n          text: \"There are no pages in this book\",\n          color: \"orange\"\n        });\n      }\n    };\n    getPages();\n  }, []);\n\n  ///when the current page updates gets the current pages, if the user is writing\n  //if there are no pages in the book then it adds pages, if the user is writing\n  //if a user is trying to write on another users book, it redirects them to the page where they can read it instead\n  useEffect(() => {\n    const getPages = async () => {\n      const res = await reqBook(\"get\", `/books/${bookId}`, \"book\");\n      if (!areReading && res.data.username === currentUser.username) {\n        const res = await reqPages(\"get\", `/books/${bookId}/pages`, \"pages\", {\n          page_nums: currPage\n        }, false);\n        if (res.message === \"Page not found!\") {\n          addPages();\n        } else {\n          setPages(() => [...res]);\n        }\n      } else if (!areReading && res.data.username !== currentUser.username) {\n        navigate(`/book/${bookId}`);\n        //set message to: Unautrized! Only the writer of the book can edit the book.\n      }\n    };\n\n    getPages();\n  }, [currPage]);\n\n  //go to the next or previous pages\n  //save the current pages\n  const changePage = (num, data) => {\n    if (!areReading) updatePage(data);\n    let newPage = currPage[0] !== null ? currPage[0] + num : num;\n    if (newPage <= 0) newPage = 1;\n    if (newPage >= pages.length && areReading) newPage = pages.length - 1;\n    setCurrPage(() => [newPage, newPage + 1]);\n  };\n\n  //gose to a page\n  const goToPage = num => {\n    setCurrPage(() => [num, num + 1]);\n  };\n\n  //add new Pages\n  const addPages = async () => {\n    await reqPages(\"post\", `/books/${bookId}/pages`, \"pages\", {\n      num_of_pages: 2,\n      page_num: currPage[0]\n    });\n  };\n\n  //saves/updates the current pages\n  const updatePage = async data => {\n    if (currPage[0]) {\n      await reqPages(\"patch\", `/books/${bookId}/pages/${currPage[0]}`, \"page\", {\n        text: data.text\n      }, false);\n      await reqPages(\"patch\", `/books/${bookId}/pages/${currPage[1]}`, \"page\", {\n        text: data.text2\n      }, false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Book\",\n    children: [pages[0] && !areReading ? /*#__PURE__*/_jsxDEV(BookMark, {\n      bookId: bookId,\n      username: currentUser.username,\n      currPageId: pages[0].id,\n      changePage: goToPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"img\", {\n      className: areReading ? \"Book_cover_Reading\" : \"Book_cover\",\n      src: cover,\n      alt: \"cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: areReading ? \"Book_pages_Reading\" : \"Book_pages\",\n      src: page,\n      alt: \"pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), pages.length > 0 ? areReading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        changePage: changePage,\n        page: [pages[currPage[0] - 1], pages[currPage[1] - 1]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(InputPage, {\n        changePage: changePage,\n        savePage: updatePage,\n        page: [...pages]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(Book, \"kkdC41MmlY58/XpMS2nbggvxaiI=\", false, function () {\n  return [useNavigate, useAxios, useAxios];\n});\n_c = Book;\nexport default Book;\nvar _c;\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"names":["cover","page","useNavigate","useState","useEffect","useContext","InputPage","BookMark","UserContext","MessageContext","Page","useAxios","jsxDEV","_jsxDEV","Fragment","_Fragment","Book","_ref","_s","areReading","bookId","currentUser","setMessage","navigate","reqPages","pages","setPages","reqBook","currPage","setCurrPage","getPages","res","data","length","text","color","username","page_nums","message","addPages","changePage","num","updatePage","newPage","goToPage","num_of_pages","page_num","text2","className","children","currPageId","id","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","savePage","_c","$RefreshReg$"],"sources":["/Users/rosepowell/Desktop/Book_Writing/book_writing/front/src/books/Book.js"],"sourcesContent":["import cover from \"../sprites/OpenBook1.png\";\nimport page from \"../sprites/OpenBookPages.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState, useEffect, useContext } from \"react\";\nimport InputPage from \"./InputPage\";\nimport BookMark from \"../books/BookMark\";\nimport { UserContext, MessageContext } from \"../context/context\";\nimport Page from \"./Page\";\n\nimport useAxios from \"../hooks/useAxios\";\nimport \"../css/Book.css\";\n\n//keeps track of what page the user is on\n//\n// if they are reading the book gets all the pages for it\n//\n//  if not gets the page by page num when going to the next page\n//   add pages when there are no more Pages\n//   updates the pages when changeing pages and when user presses save\n///////////\nconst Book = ({ areReading, bookId }) => {\n  const currentUser = useContext(UserContext);\n  const setMessage = useContext(MessageContext).setMessage;\n  const navigate = useNavigate();\n  const [reqPages, pages, setPages] = useAxios([], areReading);\n  const [reqBook] = useAxios(null);\n  const [currPage, setCurrPage] = useState([1, 2]);\n\n  //when the component first renders\n  // gets all the pages in the book, if the user is reading the book\n  useEffect(() => {\n    const getPages = async () => {\n      if (areReading) {\n        const res = await reqPages(\n          \"get\",\n          `/books/${bookId}/pages/all`,\n          \"pages\"\n        );\n        if (res.data.length <= 0) navigate(`/`);\n        setMessage({\n          text: \"There are no pages in this book\",\n          color: \"orange\",\n        });\n      }\n    };\n    getPages();\n  }, []);\n\n  ///when the current page updates gets the current pages, if the user is writing\n  //if there are no pages in the book then it adds pages, if the user is writing\n  //if a user is trying to write on another users book, it redirects them to the page where they can read it instead\n  useEffect(() => {\n    const getPages = async () => {\n      const res = await reqBook(\"get\", `/books/${bookId}`, \"book\");\n\n      if (!areReading && res.data.username === currentUser.username) {\n        const res = await reqPages(\n          \"get\",\n          `/books/${bookId}/pages`,\n          \"pages\",\n          { page_nums: currPage },\n          false\n        );\n        if (res.message === \"Page not found!\") {\n          addPages();\n        } else {\n          setPages(() => ( [...res]));\n        }\n      } else if (!areReading && res.data.username !== currentUser.username) {\n        navigate(`/book/${bookId}`);\n        //set message to: Unautrized! Only the writer of the book can edit the book.\n      }\n    };\n\n    getPages();\n  }, [currPage]);\n\n  //go to the next or previous pages\n  //save the current pages\n  const changePage = (num, data) => {\n    if (!areReading) updatePage(data);\n    let newPage = currPage[0] !== null ? currPage[0] + num : num;\n    if (newPage <= 0) newPage = 1;\n    if (newPage >= pages.length && areReading) newPage = pages.length - 1;\n    setCurrPage(() => ([newPage, newPage + 1]));\n  };\n\n  //gose to a page\n  const goToPage = (num) => {\n    setCurrPage(() => ([num, num + 1]));\n  };\n\n  //add new Pages\n  const addPages = async () => {\n    await reqPages(\"post\", `/books/${bookId}/pages`, \"pages\", {\n      num_of_pages: 2,\n      page_num: currPage[0],\n    });\n  };\n\n  //saves/updates the current pages\n  const updatePage = async (data) => {\n    if (currPage[0]) {\n      await reqPages(\n        \"patch\",\n        `/books/${bookId}/pages/${currPage[0]}`,\n        \"page\",\n        { text: data.text },\n        false\n      );\n       await reqPages(\n        \"patch\",\n        `/books/${bookId}/pages/${currPage[1]}`,\n        \"page\",\n        { text: data.text2 },\n        false\n      );\n    }\n  };\n\n  return (\n    <div className=\"Book\">\n      {pages[0] && !areReading ? (\n        <BookMark\n          bookId={bookId}\n          username={currentUser.username}\n          currPageId={pages[0].id}\n          changePage={goToPage}\n        />\n      ) : null}\n\n      <img\n        className={areReading ? \"Book_cover_Reading\" : \"Book_cover\"}\n        src={cover}\n        alt=\"cover\"\n      />\n      <img\n        className={areReading ? \"Book_pages_Reading\" : \"Book_pages\"}\n        src={page}\n        alt=\"pages\"\n      />\n\n      {pages.length > 0 ? (\n        areReading ? (\n          <>\n            <Page\n              changePage={changePage}\n              page={[pages[currPage[0] - 1], pages[currPage[1] - 1]]}\n            />\n          </>\n        ) : (\n          <>\n            <InputPage\n              changePage={changePage}\n              savePage={updatePage}\n              page={[...pages]}\n            />\n          </>\n        )\n      ) : null}\n    </div>\n  );\n};\n\nexport default Book;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}